#region Help:  Introduction to the script task
/*

The Script makes use of the Window Form and drawing libraries to pop up a window form 
Makes use of linq and System.io to traverse a directory based on a pattern "*_2 letter character " and get the most recent modified file
with pattern "*Layout.xls"

*/
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Drawing;
using System.IO;
using System.Linq;
#endregion

namespace ST_daccd45d02af4781b9cc4fa1b3140e47
{
   
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        
		public void Main()
		{


           string output ="" ;
            string formatted_date = "";
            int invalid_path =0 ;
            if (ScriptMain.InputBox("School_Code", "Enter School Code:", ref output) == DialogResult.OK)
            {

                Dts.Variables["User::School_code"].Value = output;
                string directory = "\\\\sora.royall\\\\Layouts\\";
                string d_pattern = "*_" + output.Trim();
                string f_pattern = "*"+output+"_*Layout*.xls";
                ScriptMain c = new ScriptMain();
                string folder_path = c.GetDirectory1(directory, d_pattern) + "\\";
                if (folder_path == "\\")
                {

                    
                        invalid_path = 1;
                         goto end;
                   

                }
                string file_name = c.GetLastFileInDirectory(folder_path, f_pattern , ref formatted_date);
                if (file_name == "invalid file format")
                {
                    invalid_path = 1;
                    goto end;
                }
                string name = Path.GetFileName(file_name);
                Dts.Variables["User::Layout_file_name"].Value = name;
                MessageBox.Show(file_name);
                Dts.Variables["User::Full_file_name"].Value = file_name;
                Dts.Variables["User::last_mod_date"].Value = formatted_date;
                end:
                Dts.TaskResult = (int)ScriptResults.Success;

            }
            
            else
            {
                
                Dts.TaskResult = (int)ScriptResults.Failure;
            }

            Dts.Variables["User::invalid_flag"].Value = invalid_path;
        }


        public static DialogResult InputBox(string title, string promptText, ref string output)
        {
            Form form = new Form();
            Label label = new Label();
            TextBox textBox = new TextBox();
            Button buttonOk = new Button();
            Button buttonCancel = new Button();

            form.Text = title;
            label.Text = promptText;
            textBox.Text = output;

            buttonOk.Text = "OK";
            buttonCancel.Text = "Cancel";
            buttonOk.DialogResult = DialogResult.OK;
            buttonCancel.DialogResult = DialogResult.Cancel;

            label.SetBounds(9, 20, 372, 13);
            textBox.SetBounds(12, 36, 372, 20);
            buttonOk.SetBounds(228, 72, 75, 23);
            buttonCancel.SetBounds(309, 72, 75, 23);

            label.AutoSize = true;
            textBox.Anchor = textBox.Anchor | AnchorStyles.Right;
            buttonOk.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
            buttonCancel.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;

            form.ClientSize = new Size(396, 107);
            form.Controls.AddRange(new Control[] { label, textBox, buttonOk, buttonCancel });
            form.ClientSize = new Size(Math.Max(300, label.Right + 10), form.ClientSize.Height);
            form.FormBorderStyle = FormBorderStyle.FixedDialog;
            form.StartPosition = FormStartPosition.CenterScreen;
            form.MinimizeBox = false;
            form.MaximizeBox = false;
            form.AcceptButton = buttonOk;
            form.CancelButton = buttonCancel;

            DialogResult dialogResult = form.ShowDialog();
            output = textBox.Text.ToString();
            return dialogResult;
        }

        public string GetLastFileInDirectory(string folder_path, string f_pattern, ref string formatted_date)     
        {
            string message;
            try
            {
                Directory.SetCurrentDirectory(folder_path);
                DirectoryInfo dirinfo = new DirectoryInfo(folder_path);
                var file = (from f in Directory.GetFiles(folder_path,f_pattern, SearchOption.AllDirectories) orderby Directory.GetLastWriteTime(f) descending select f).First();
                DateTime last_modified_date = Directory.GetLastWriteTime(file);
                formatted_date = last_modified_date.ToString("MM/dd/yyyy hh:mm:ss tt");
                return file.ToString();
            }

            catch (InvalidOperationException patternexp)
            {
                message = patternexp.Message;
                MessageBox.Show("File with *Schoolcd_*Layout* not found in folder");
                return "invalid file format";


            }


        }


        public string GetDirectory1(string directory, string pattern)    
        {
            string dir_message;

            try
            {
                Directory.SetCurrentDirectory(directory);
                DirectoryInfo dirinfo = new DirectoryInfo(directory);
                DirectoryInfo dir = (from d in dirinfo.EnumerateDirectories(pattern) select d).First();
                return dir.FullName;
            }

         catch (InvalidOperationException pattern_exp)
            {

                dir_message = pattern_exp.Message;
                MessageBox.Show("Directory with specified school code ending with *_School_cd not found" ); // comment this out multiple folder run
                return "";
            }

        }


 


        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}
